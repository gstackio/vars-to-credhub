---
meta:
  name:    vars-to-credhub
  release: (( concat meta.name " CLI" ))
  target:  (( grab meta.team ))
  url:     https://ci.gstack.io
  team:    gk-plat-devs

  initial_version: 1.0.0

  go:
    binary: vars-to-credhub
    cmd_module: .

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  image:
    name: (( concat meta.private-registry.host "/gstack/gk-ops" ))
    tag:  latest
    registry:
      username: (( grab meta.private-registry.username ))
      password: (( grab meta.private-registry.password ))

  private-registry:
    host:       harbor.ci.gstack.io
    username:   ((private-registry-username))
    password:   ((private-registry-password))

  aws:
    bucket:      (( grab meta.pipeline ))
    region_name: eu-west-3
    access_key:  ((aws-access-key))
    secret_key:  ((aws-secret-key))

  github:
    owner:  gstackio
    repo:   vars-to-credhub
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  slack:
    webhook:       ((slack-webhook))
    username:      ((slack-username))
    icon:          ((slack-icon-url))
    channel:       "#oss-pipelines-notifications"

jobs:

  - name: test
    plan:
      - (( inline ))
      - in_parallel:
          - (( merge on get ))
          - get: golang-alpine
            trigger: true

      # NOTICE: we replace all further steps
      - # task: test
        (( prune ))

      - &compile_task
        task: compile
        image: golang-alpine
        config:
          platform: linux
          inputs:
            - name: git
          outputs:
            - name: compiled-binary
          run:
            dir: git
            path: go
            args:
              - build
              - -o
              - ../compiled-binary/vars-to-credhub

      - &smpoke_test_task
        task: smoke-test
        image: image
        config:
          platform: linux
          inputs:
            - name: compiled-binary
            - name: git
          run:
            path: sh
            args:
              - -exc
              - |
                export PATH=${PWD}/compiled-binary:${PATH}

                cd "git" || exit 1
                tests/invalid.sh
                tests/valid.sh

  - name: test-pr
    plan:
      - (( inline ))
      - in_parallel:
          - (( merge on get ))
          - get: golang-alpine
            trigger: true

      - {} # put: git-pull-requests

      # We replace the 'task: text' by a block of 2 tasks
      - task:   (( prune ))
        image:  (( prune ))
        config: (( prune ))
        do:
          - *compile_task

          - *smpoke_test_task

  - name: shipit
    plan:
      - (( inline ))
      - in_parallel:
          - (( merge on get ))
          - { get: image, resource: golang-alpine, passed: [ test ] }
      - task: release
        config:
          run:
            path: sh
            args:
              - -ec
              - |
                apk --no-progress add bash git
                export PATH=${PWD}/gopath/bin:${PATH}
                bash "${SHIPIT_SCRIPT}"
          params:
            SHIPIT_SCRIPT: (( concat "./gopath/src/" meta.go.module "/ci/scripts/shipit" ))

resources:

  - name: image
    source:
      tag:               (( prune ))
      semver_constraint: "< 1970" # Avoid YYYYMMDD tags like '20231219'

  - name: version
    source:
      bucket:            (( prune ))
      region_name:       (( prune ))
      key:               (( prune ))
      access_key_id:     (( prune ))
      secret_access_key: (( prune ))
      driver:      git
      uri:         git@github.com:gstackio/gk-pipelines-compass.git
      branch:      master
      file:        (( concat "versions/" meta.pipeline ))
      private_key: ((github-private-key))
      git_user:    "((git-commit-name)) <((git-commit-email))>"

  - name: golang-alpine
    type: registry-image
    icon: docker
    check_every: 24h
    source:
      repository: golang
      variant:    alpine

  - name: git
    webhook_token: ((concourse-webhook-token))
    check_every: 24h

  - name: git-pull-requests
    webhook_token: ((concourse-webhook-token))
    # check_every: 1m # we leave the default here
